name: Build and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          docker build -t $IMAGE_URI ./webapp
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl set image deployment/webapp webapp=$IMAGE_URI

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/webapp --timeout=120s

      - name: Get public URL of the app
        id: get-lb
        run: |
          echo "Waiting for LoadBalancer to get external IP..."
          for i in {1..30}; do
            LB=$(kubectl get svc webapp-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [[ -z "$LB" ]]; then
              LB=$(kubectl get svc webapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            fi
            if [[ -n "$LB" ]]; then
              echo "LoadBalancer address: $LB"
              echo "LOAD_BALANCER=$LB" >> $GITHUB_ENV
              exit 0
            fi
            sleep 10
          done
          echo "LoadBalancer external IP not found after timeout"
          exit 1

      - name: Health check on /healthz
        run: |
          echo "Performing health check on /healthz..."
          for i in {1..30}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$LOAD_BALANCER/healthz)
            echo "HTTP Status: $STATUS_CODE"

            if [[ "$STATUS_CODE" -eq 200 ]]; then
              echo "Health check passed"
              exit 0
            fi

            echo "Retrying health check ($i)..."
            sleep 10
          done

          echo "Health check failed after multiple attempts"
          exit 1
